import uvicorn

from fastapi import FastAPI, Request, Response
from pydantic import BaseModel

from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

import argparse
import logging
import sys
from datetime import datetime
from typing import Optional
from enum import StrEnum, auto
import random
from anyio import Semaphore, sleep


testsite = FastAPI(title="Test Site")
logging.basicConfig(
    level=logging.INFO, format="[%(levelname)s]: %(asctime)s - %(message)s"
)


class Period(StrEnum):
    second = auto()
    minute = auto()
    hour = auto()
    day = auto()
    month = auto()
    year = auto()


class LimitConfig(BaseModel):
    rate: Optional[int] = 10
    rateperiod: Optional[Period] = "second"
    quota: Optional[int] = 10000
    quotaperiod: Optional[Period] = "day"
    maxconcur: Optional[int] = 10
    throttle: bool = False
    maxranddelay: Optional[float] = None


# TODO: validation of limit combinations (rate and period need to be both present, maxconcur > 0
# TODO: validation of maxranddelay > 0
# TODO: validation of throttle requires at least one of the rate/quota and periods

###

parser = argparse.ArgumentParser()

parser.add_argument("-r", "--rate", type=int, default=10, help="Set allowed rate (int)")
parser.add_argument(
    "-rp",
    "--rateperiod",
    type=str,
    default="second",
    choices=["second", "minute", "hour", "day", "month", "year"],
    help="Set period for allowed rate [second,minute,hour,day,month,year]",
)
parser.add_argument(
    "-q", "--quota", type=int, default=10000, help="Set allowed quota (int)"
)
parser.add_argument(
    "-qp",
    "--quotaperiod",
    type=str,
    default="day",
    choices=["second", "minute", "hour", "day", "month", "year"],
    help="Set period for quota [second,minute,hour,day,month,year]",
)
parser.add_argument(
    "-c",
    "--maxconcur",
    type=int,
    default=10,
    help="Set max concurrent requests per user (int)",
)
parser.add_argument(
    "-t",
    "--throttle",
    type=bool,
    default=False,
    help="If true, doubles response time once rate/quota exceeded",
)
parser.add_argument(
    "-d",
    "--maxranddelay",
    type=float,
    default=None,
    help="Set max random delay in seconds (float)",
)

args = parser.parse_args()
limitconfig = LimitConfig(**dict(args._get_kwargs()))

###

limiter = Limiter(
    key_func=get_remote_address, headers_enabled=True, strategy="moving-window"
)
# FIXME: rate strategy should be moving window but quota should be fixed
testsite.state.limiter = limiter
testsite.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)
semaphore = Semaphore(limitconfig.maxconcur)

idlist = ["127.0.0.1", "/limited"]


### FUNCTIONS


async def default_response(request: Request) -> dict:
    """Creates a standard diagnostic response that includes information about the endpoint hit and the data sent.
    Also includes timestamps indicating the point at which the request was received and filled. This can be used
    to compare against the actual request and response time on the client side.

    Args:
        request (Request): Request object generated by hitting endpoint
        limitconfig (LimitConfig, optional): Pydantic model used to store query parameters for limit configurations.
            Defaults to None.

    Returns:
        dict: Standard diagnostic response
    """
    # because body is an awaitable cannot be a pydantic model without more complex solutions
    response = {
        "request": {
            "path": request["path"],
            "headers": request.headers,
            "queryParams": request.query_params,
            "clientAddress": request.client,
            "requestBody": await request.body(),
        },
        "config": {},
        "receivedAt": request.state.receivedAt,
        "fulfilledAt": datetime.now(),
    }
    if request["path"] == "/limited":
        response["config"]["LimitConfig"] = limitconfig.dict()
        if limitconfig.maxranddelay is not None:
            response["config"]["randdelay"] = request.state.randdelay

    return response


def throttle_excess() -> bool:
    
    cur_limit = sys._getframe(1).f_locals["self"].limit                
    l_results = {}
    
    for l in limiter._route_limits["app.limited_endpoint"]:        
        if limitconfig.throttle and not limiter.limiter.test(l.limit,*idlist):
            l_results[l.limit]= True
        else:
            l_results[l.limit]= False    

    if any(l_results.values()):        
        for k,v in l_results.items():
            if k==cur_limit and not v:
                limiter.limiter.hit(k,*idlist) # FIXME: this ends up running twice!        
        return True        
    else:
        return False
        
        
### ENDPOINTS

@testsite.middleware("http")
async def middleware(request: Request, call_next):
    
    request.state.receivedAt = datetime.now()
        
    if limitconfig.throttle:
        request.state.throttled = False
        
    for l in limiter._route_limits["app.limited_endpoint"]:
        logging.info(f"{(l.limit, *idlist)} available: {limiter.limiter.get_window_stats(l.limit, *idlist)[1]}")
        if limitconfig.throttle and not limiter.limiter.test(l.limit,*idlist):
            request.state.throttled = True                
                                
    response = await call_next(request)    
        
    if limitconfig.throttle and request.state.throttled:
        logging.info("Request throttled")        
        await sleep((datetime.now()-request.state.receivedAt).total_seconds())        
        
    return response

@testsite.get("/")
@testsite.post("/")
async def index(request: Request):
    """Standard endpoint for non-limited testing.

    Returns:
        dict: Standard diagnostic response
    """    
    response = await default_response(request)
    
    return response


@testsite.get("/limited")
@testsite.post("/limited")
@limiter.limit(
    f"{limitconfig.rate}/{limitconfig.rateperiod},{limitconfig.quota}/{limitconfig.quotaperiod}",exempt_when=throttle_excess
)  # FIXME: needs to handle Nones
async def limited_endpoint(request: Request, response: Response) -> Response:
    """Endpoint to test BADGER's ability to handle different API limits.

    Args:
        request (Request): _description_
        response (Response): _description_

    Returns:
        dict: Standard diagnostic response
    """    
    
    """
    Supports following limits:
        - # of requests per defined period
        - max # of concurrent requests
        - minimum required delay in seconds between subsequent requests
        - add a randomized delay up to a maximum of seconds before providing a response
    """

    async with semaphore:
        logging.info(f"{semaphore._value} semaphore available")

        if limitconfig.maxranddelay is not None and limitconfig.maxranddelay > 0:
            random.seed()
            request.state.randdelay = random.uniform(0, limitconfig.maxranddelay)
            logging.info(f"{request.state.randdelay}s of random delay")
            await sleep(request.state.randdelay)
        else:
            request.state.randdelay = 0

        # TODO: implement throttle

        response = await default_response(request)

    logging.info(f"{semaphore._value} semaphore available")

    return response



if __name__ == "__main__":
    uvicorn.run("app:testsite", port=9000, reload=True)
